import UIKit

import UIKit

// Race Condition ‚Äî —Ü–µ —Å–∏—Ç—É–∞—Ü—ñ—è, –∫–æ–ª–∏ –∫—ñ–ª—å–∫–∞ –ø–æ—Ç–æ–∫—ñ–≤ –æ–¥–Ω–æ—á–∞—Å–Ω–æ –∑–º—ñ–Ω—é—é—Ç—å –æ–¥–Ω—É —Å–ø—ñ–ª—å–Ω—É –∑–º—ñ–Ω–Ω—É,
// —ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–∞—î –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∏–º.

// === –ü—Ä–∏–∫–ª–∞–¥ 1: Race Condition ===
nonisolated(unsafe) var counter = 0
// nonisolated(unsafe) ‚Äî –¥–æ–∑–≤–æ–ª—è—î –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—É –∑–º—ñ–Ω–Ω—É –∑ –±—É–¥—å-—è–∫–æ–≥–æ –ø–æ—Ç–æ–∫—É (–±–µ–∑ –∑–∞—Ö–∏—Å—Ç—É).

let group1 = DispatchGroup()
let queue = DispatchQueue.global()

for _ in 0..<1000 {
    group1.enter()
    queue.async {
        Thread.sleep(forTimeInterval: Double.random(in: 0.001...0.01))
        counter += 1
        group1.leave()
    }
}

group1.notify(queue: .main) {
    print("‚ö†Ô∏è Race Condition Result ‚Üí counter =", counter) // –û—á—ñ–∫—É—î—à 1000, –∞–ª–µ –æ—Ç—Ä–∏–º–∞—î—à, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 991
    
    // === –ü—Ä–∏–∫–ª–∞–¥ 2: –£—Å—É–Ω–µ–Ω–Ω—è Race Condition (Serial Queue) ===
    nonisolated(unsafe) var counter2 = 0
    let group2 = DispatchGroup()
    let serialQueue = DispatchQueue(label: "com.example.serial")

    for _ in 0..<2000 {
        group2.enter()
        serialQueue.async {
            Thread.sleep(forTimeInterval: Double.random(in: 0.001...0.01))
            counter2 += 1
            group2.leave()
        }
    }

    group2.notify(queue: .main) {
        print("‚úÖ Fixed (Serial Queue) Result ‚Üí counter2 =", counter2) // –ó–∞–≤–∂–¥–∏ 2000
        
        // === –ü—Ä–∏–∫–ª–∞–¥ 3: –£—Å—É–Ω–µ–Ω–Ω—è Race Condition (NSLock) ===
        nonisolated(unsafe) var counter3 = 0
        let group3 = DispatchGroup()
        let lock = NSLock()
        let concurrentQueue = DispatchQueue.global() // üî∏ —ñ–Ω—à–∞, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞ —á–µ—Ä–≥–∞

        for _ in 0..<500 {
            group3.enter()
            concurrentQueue.async {
                lock.lock()
                Thread.sleep(forTimeInterval: Double.random(in: 0.001...0.01))
                counter3 += 1
                lock.unlock()
                group3.leave()
            }
        }

        group3.notify(queue: .main) {
            print("‚úÖ Fixed (NSLock) Result ‚Üí counter3 =", counter3) // –ó–∞–≤–∂–¥–∏ 500
            
            // === –ü—Ä–∏–∫–ª–∞–¥ 4: Race Condition —á–µ—Ä–µ–∑ OperationQueue + DispatchGroup ===
            nonisolated(unsafe) var counter4 = 0
            let group4 = DispatchGroup()
            let queue4 = OperationQueue()
            queue4.maxConcurrentOperationCount = 5 // –æ–¥–Ω–æ—á–∞—Å–Ω–æ –¥–æ 5 –ø–æ—Ç–æ–∫—ñ–≤

            for _ in 0..<1000 {
                group4.enter()
                queue4.addOperation {
                    Thread.sleep(forTimeInterval: Double.random(in: 0.001...0.01))
                    counter4 += 1
                    group4.leave()
                }
            }

            group4.notify(queue: .main) {
                print("‚ö†Ô∏è Race Condition (OperationQueue) Result ‚Üí counter4 =", counter4)
            }
        }
    }
}



/*
 üîπ –ö–æ—Ä–æ—Ç–∫–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫:
 –£ —Ü—å–æ–º—É –∫–æ–¥—ñ –º–∏ —É—Å—É–≤–∞—î–º–æ race condition, —Å—Ç–≤–æ—Ä–∏–≤—à–∏ serial queue ‚Äî –≤–æ–Ω–∞ –≥–∞—Ä–∞–Ω—Ç—É—î, —â–æ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è counter –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ, –∞ –Ω–µ –æ–¥–Ω–æ—á–∞—Å–Ω–æ –∑ –∫—ñ–ª—å–∫–æ—Ö –ø–æ—Ç–æ–∫—ñ–≤.
 
 DispatchGroup –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è, —â–æ–± –¥–æ—á–µ–∫–∞—Ç–∏—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π, –∞ notify –≤–∏–∫–ª–∏–∫–∞—î –±–ª–æ–∫ —É main queue, –∫–æ–ª–∏ –≤—Å—ñ –∑–∞–¥–∞—á—ñ –≤–∏–∫–æ–Ω–∞–Ω—ñ.
 
 
 üß© –ü—ñ–¥—Å—É–º–æ–∫:
    serialQueue ‚Üí –∑–∞–ø–æ–±—ñ–≥–∞—î –æ–¥–Ω–æ—á–∞—Å–Ω–æ–º—É –¥–æ—Å—Ç—É–ø—É –¥–æ counter.
    DispatchGroup ‚Üí –¥–æ–∑–≤–æ–ª—è—î –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–¥–∞—á.
    notify ‚Üí –≤–∏–∫–ª–∏–∫–∞—î —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç—ñ–≤.
 */
