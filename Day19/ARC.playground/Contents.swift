import UIKit

// –ó–∞–≤–¥–∞–Ω–Ω—è 1. –í–∏—Ç—ñ–∫ –ø–∞–º‚Äô—è—Ç—ñ —á–µ—Ä–µ–∑ —Å–∏–ª—å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
class Person {
    var name: String
    weak var friend: Person?    // –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ weak —â–æ–± –Ω–µ –±—É–ª–æ –≤–∏—Ç–æ–∫—ñ –ø–∞–º'—è—Ç—ñ
    
    init(name: String) {
        self.name = name
    }
    
    deinit {
        print("\(name) deinit")
    }
}


var person1: Person? = Person(name: "Alice")
var person2: Person? = Person(name: "Bob")

// –°—Ç–≤–æ—Ä—é—î–º–æ —Ü–∏–∫–ª —Å–∏–ª—å–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å
person1?.friend = person2
person2?.friend = person1

// –†–æ–∑—Ä–∏–≤–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
person1 = nil
person2 = nil  // –¢—É—Ç –¥–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ç–æ—Ä –Ω–µ —Å–ø—Ä–∞—Ü—é—î —á–µ—Ä–µ–∑ —Ü–∏–∫–ª —Å–∏–ª—å–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å

// --------------------------------------------------------------- //
print("\n")

class Human {
    var name: String
    // weak var employer: Company? // —Å–∏–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–æ–º–ø–∞–Ω—ñ—é ‚ùå
    unowned let employer: Company
    
    init(name: String, employer: Company) {
        self.name = name
        self.employer = employer
        print("\(name) created!")
    }
    
    func introduce() { print("Hi, I am \(name).")}
    
    deinit {
        print("\(name) deinit")
    }
}

class Company {
    // –£ –º–∞—Å–∏–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —è–∫ —Å–∏–ª—å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è ‚Üí —Ç–æ–±—Ç–æ Company –≤–æ–ª–æ–¥—ñ—î Human
    var employees: [Human] = []
    
    // –¥–æ–¥–∞—î —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –¥–æ –º–∞—Å–∏–≤—É
    func addEmployee(name: String) {
        let employee = Human(name: name, employer: self)
        employees.append(employee)
        }
    
    // –≤–∏–∫–ª–∏–∫–∞—î –º–µ—Ç–æ–¥ introduce()  –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–ø—ñ—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –≤ –º–∞—Å–∏–≤—ñ
    func introduceEmplayees() {
        employees.forEach { employee in
            employee.introduce()
            
        }
    }
    
    deinit {
            print("Company deinit")
        }
}

var company: Company? = Company()
//var human1: Human? = Human(name: "John")
//var human2: Human? = Human(name: "Alice")
//
//company?.addEmployee(human1!)
//company?.addEmployee(human2!)

company?.addEmployee(name: "John")
company?.addEmployee(name: "Alice")
company?.introduceEmplayees()

company = nil
//human1 = nil
//human2 = nil

/*
–ê–ª–µ —è–∫—â–æ –∑—Ä–æ–±–∏—Ç–∏ —Ç–∞–∫:
var company: Company? = Company()
var john: Human? = Human(name: "John", employer: company!)
company = nil
john?.employer // üí• CRASH, –±–æ company –≤–∂–µ –Ω–µ–º–∞
*/
print("\n–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤:\n")

class Book {
    var title: String
    
    init(title: String) {
        self.title = title
        print("'\(title)' book created!")
    }
    
    deinit {
        print("'\(title)' book deinitialized!")
    }
}

class Author {
    var name: String
    
    init(name: String) {
        self.name = name
        print("\(name) Author created!")
    }
    
    deinit {
        print("\(name) Author deinitialized!")
    }
}


class Library {
    var name: String
    var books: [Book] = []
    
    init(name: String) {
        self.name = name
        print("\(name) Library created.")
    }
    
    deinit {
        print("\(name) Library deinitialized.")
    }
}

class Member {
    var name: String
    weak var library: Library?
    
    init(name: String) {
        self.name = name
        print("\(name) member created.")
    }
    
    deinit {
        print("\(name) member deinitialized.")
    }
}

var book1: Book? = Book(title: "The Da Vinci Cod")
var author1: Author? = Author(name: "Dan Brown")
var library1: Library? = Library(name: "Central Library")
var member1: Member?  = Member(name: "Max")

//  –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–∑–∞—î–º–æ–∑–∞–ª–µ–∂–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è

library1?.books.append(book1!) // - –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ —É—Ç—Ä–∏–º—É—î –∫–Ω–∏–≥—É(strong reference)
member1?.library = library1 // - —á–ª–µ–Ω –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ —É—Ç—Ä–∏–º—É—î –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É (strong reference)


// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–∏–∫–∞–Ω–Ω—è, —è–∫–µ –∑–∞—Ö–æ–ø–ª—é—î book1 —ñ author1
let closure1 = { [weak book1, weak author1] in
    print("\(book1?.title ?? "") written by \(author1?.name ?? "")")
}


//  –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–∏–∫–∞–Ω–Ω—è, —è–∫–µ –∑–∞—Ö–æ–ø–ª—é—î library1 —ñ member1
let closure2 = { [weak library1, weak member1] in
    print("\(member1?.name ?? "") is a member of \(library1?.name ?? "") library")
}

// –í–∏–∫–ª–∏–∫–∞—î–º–æ
closure1()
closure2()

print("\nSetting objects to nil...\n")
book1 = nil
author1 = nil
library1 = nil
member1 = nil

// MARK:  ---- TASK - 1 (Strong vs Weak) ----
print("\n ---- TASK - 1 (Strong vs Weak) ----")
class Somebody {
    var name: String
    var car: Car?  // –¥–æ–ø–∏—Å—É—î–º weak —â–æ–± –∑–≤—ñ–ª—å–Ω–∏—Ç–∏ –ø–∞–º'—è—Ç—å
    
    init(name: String) {
        self.name = name
        print("üë§ Somebody \(name) —Å—Ç–≤–æ—Ä–µ–Ω–∏–π")
    }
    
    deinit {
        print("‚ùå Somebody \(name) –∑–≤—ñ–ª—å–Ω–µ–Ω–∏–π –∑ –ø–∞–º‚Äô—è—Ç—ñ")
    }
}

class Car {
    var brand: String
    var owner: Somebody?    //–¥–æ–ø–∏—Å—É—î–º weak —â–æ–± –∑–≤—ñ–ª—å–Ω–∏—Ç–∏ –ø–∞–º'—è—Ç—å
    
    init(brand: String) {
        self.brand = brand
        print("üöó Car \(brand) —Å—Ç–≤–æ—Ä–µ–Ω–∞")
    }
    
    deinit {
          print("‚ùå Car \(brand) –∑–≤—ñ–ª—å–Ω–µ–Ω–∞ –∑ –ø–∞–º‚Äô—è—Ç—ñ")
      }
}

var somebody: Somebody? = Somebody(name: "Max")
var car: Car? = Car(brand: "Citroen")

somebody?.car = car     // Somebody ‚Üí —É—Ç—Ä–º—É—î ‚Üí Car
car?.owner = somebody   // Car ‚Üí —É—Ç—Ä–º—É—î ‚Üí Somebody

somebody = nil          // –ø—Ä–æ–±—É—î–º–æ –∑–≤—ñ–ª—å–Ω–∏—Ç–∏ –∑ –ø–∞–º º—è—Ç—ñ –æ–± º—î–∫—Ç somebody
car = nil                // –ø—Ä–æ–±—É—î–º–æ –∑–≤—ñ–ª—å–Ω–∏—Ç–∏ –∑ –ø–∞–º º—è—Ç—ñ –æ–± º—î–∫—Ç car


// MARK:  ---- TASK - 2 (Unowned vs Weak) ----
print("\n ---- TASK - 2 (Unowned vs Weak) ----")
class Customer {
    var name: String
    var creditCard: CreditCard? // –°–∏–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞—Ä—Ç–∫—É
    
    init(name: String) {
        self.name = name
        print("Create customer with name: \(name)")
    }
    
    deinit {
        print("Customer \(name) deinit")
    }
}

class CreditCard {
    var number: String
    unowned var owner: Customer // `unowned`, –±–æ –∫–∞—Ä—Ç–∫–∞ –Ω–µ –º–æ–∂–µ —ñ—Å–Ω—É–≤–∞—Ç–∏ –±–µ–∑ –≤–ª–∞—Å–Ω–∏–∫–∞
    
    init(number: String, owner: Customer) {
        self.number = number
        self.owner = owner
        print("Create creditcard: \(number)")
    }
    
    deinit {
            print("Card with number: \(number) deinit")
        }
}

var customer: Customer? = Customer(name: "Alex")
customer?.creditCard = CreditCard(number: "4444 7800 9823 9943", owner: customer!)

customer = nil

/*
üîπ –Ø–∫ –ø—Ä–∞—Ü—é—î
Customer strong —Ç—Ä–∏–º–∞—î –∫–∞—Ä—Ç–∫—É.
CreditCard –º–∞—î unowned –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Customer (–Ω–µ –∑–±—ñ–ª—å—à—É—î –ª—ñ—á–∏–ª—å–Ω–∏–∫).
–¢–µ–ø–µ—Ä, —è–∫—â–æ –∑—Ä–æ–±–∏—Ç–∏:
customer = nil
ARC –∑–≤—ñ–ª—å–Ω–∏—Ç—å —ñ Customer, —ñ CreditCard ‚úÖ.

‚ö†Ô∏è –ê —Ç–µ–ø–µ—Ä –≥–æ–ª–æ–≤–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
–©–æ –±—É–¥–µ, —è–∫—â–æ Customer –∑–Ω–∏–∫–Ω–µ, –∞ CreditCard –∑–∞–ª–∏—à–∏—Ç—å—Å—è?
–í—ñ–¥–ø–æ–≤—ñ–¥—å:
unowned –Ω–µ —Å—Ç–∞—î nil, –Ω–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ weak.
–¢–æ–±—Ç–æ owner –≤—Å–µ —â–µ –±—É–¥–µ –ø–æ—Å–∏–ª–∞—Ç–∏—Å—å –Ω–∞ —Ç—É –æ–±–ª–∞—Å—Ç—å –ø–∞–º‚Äô—è—Ç—ñ, –¥–µ –≤–∂–µ –Ω–µ–º–∞—î –æ–±‚Äô—î–∫—Ç–∞.
–Ø–∫—â–æ —Ç–∏ —Å–ø—Ä–æ–±—É—î—à –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ card.owner, –±—É–¥–µ crash (runtime error).
–¢–æ–º—É unowned –≤–∞—Ä—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ç–æ–¥—ñ, –∫–æ–ª–∏ —Ç–∏ –Ω–∞ 100% –≤–ø–µ–≤–Ω–µ–Ω–∏–π, —â–æ –æ–±‚Äô—î–∫—Ç –∂–∏—Ç–∏–º–µ —Å—Ç—ñ–ª—å–∫–∏ –∂, —Å–∫—ñ–ª—å–∫–∏ –π –≤–ª–∞—Å–Ω–∏–∫.
 
 */


// MARK:  ---- TASK - 3 (Closures & retain cycle) ----
print("\n ---- TASK - 3 (Closures & retain cycle) ----")
class Downloader {
    var completion: (() -> Void)?
    
    func download(completion: @escaping() -> Void) {
        self.completion = completion
    }
}

class ViewController {
    var downloader = Downloader()
    
    init() {
        print("ViewController init")
    }
    
    func startDownload() {
        downloader.download { [weak self] in    // + [weak self] in guard let self else { return }
            guard let self else { return }      // –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –≤–∏—Ç–æ–∫—É –ø–∞–º'—è—Ç—ñ
               // ‚ö†Ô∏è –¢—É—Ç strong reference –Ω–∞ self
               print("Download finished for \(self)")
           }
       }
    
    deinit {
          print("ViewController deinit")
      }
}

// –¢–µ—Å—Ç
var vc: ViewController? = ViewController()
vc?.startDownload()
vc = nil

