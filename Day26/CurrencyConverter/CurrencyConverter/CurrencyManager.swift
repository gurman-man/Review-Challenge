//
//  CurrencyManager.swift
//  CurrencyConverter
//
//  Created by mac on 13.10.2025.
//

import Foundation

enum NetWorkError: LocalizedError {
    case badURL
    case badResponse
    case decodingFailed
    case noValue
    case unknown
    
    var errorDescription: String? {
        switch self {
        case .badURL:
            return "‚ùå Invalid URL"
        case .badResponse:
            return "‚ö†Ô∏è Bad response from server"
        case .decodingFailed:
            return "üö´ Failed to decode data"
        case .noValue:
            return "No conversion value found"
        case .unknown:
            return "unknown error"
        }
    }
}

class CurrencyManager {
    private let apiKey = "cur_live_FXQIEp5zVnsBixo5v3vqTrKyFzNKc8RJClNhwI4C"
    let url = "https://api.currencyapi.com"
    
    // MARK: - –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
    // –§–æ—Ä–º—É—î URL -> –ù–∞–¥—Å–∏–ª–∞—î –∑–∞–ø–∏—Ç -> –î–µ–∫–æ–¥—É—î JSON -> –ü–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ completion
    // –¢–∏–ø Result<Double, Error> ‚Äî —Ü–µ –≤–±—É–¥–æ–≤–∞–Ω–∏–π enum —É Swift -> –≤—ñ–Ω –º–∞—î –¥–≤–∞ –∫–µ–π—Å–∏ :
//  case success(Success)
//  case failure(Failure)
    func convertCurrency(from base: String, to target: String, amount: Double, completion: @escaping (Result<Double, Error>) -> Void) {
        
        // üîπ 1. –§–æ—Ä–º—É–≤–∞–Ω–Ω—è URL
        var components = URLComponents(string: url)
        components?.scheme = "https"                     // –ø—Ä–æ—Ç–æ–∫–æ–ª
        components?.host = "api.currencyapi.com"         // –¥–æ–º–µ–Ω
        components?.path = "/v3/latest"                  // endpoint
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É (query items)
        components?.queryItems = [
            URLQueryItem(name: "base_currency", value: base),
            URLQueryItem(name: "currencies", value: target)
        ]
        
        
        // üîπ 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π URL
        guard let url = components?.url else {
            print(NetWorkError.badURL.localizedDescription)
            return
        }
        
        // üîπ 3. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É
        var request = URLRequest(url: url)
        request.httpMethod = "GET"  // –≤–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø –∑–∞–ø–∏—Ç—É (GET) -> –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ API
        request.setValue(apiKey, forHTTPHeaderField: "apikey")  // –¥–æ–¥–∞—î –∑–∞–≥–æ–ª–æ–≤–æ–∫ —ñ–∑ —Ç–≤–æ—ó–º –∫–ª—é—á–µ–º -> —â–æ–± —Å–µ—Ä–≤–µ—Ä –∑–Ω–∞–≤, —Ö—Ç–æ —Ä–æ–±–∏—Ç—å –∑–∞–ø–∏—Ç —ñ –¥–æ–∑–≤–æ–ª–∏–≤ –¥–æ—Å—Ç—É–ø
        
        // üîπ 4. –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
        URLSession.shared.dataTask(with: request) { data, response, error in
            if let err = error {
                completion(.failure(err))
                return
            }
            
            guard let data else {
                completion(.failure(NetWorkError.noValue))
                return
            }
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            guard let httpResponse = response as? HTTPURLResponse,
                  (200...299).contains(httpResponse.statusCode) else {
                completion(.failure(NetWorkError.badResponse))
                return
            }
            
            // üîπ 5. –î–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON -> –æ—Ç—Ä–∏–º—É—î–º–æ –Ω–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å -> —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É
            do {
                let decoded = try JSONDecoder().decode(CurrencyResponse.self, from: data)
                if let rate = decoded.data[target]?.value {
                    let converted = amount * rate // –º–Ω–æ–∂–∏–º–æ –Ω–∞ c—É–º—É(–ø–æ—á–∞—Ç–∫–æ–≤–∞ —Ü–∏—Ñ—Ä–∞)
                    completion(.success(converted))
                } else {
                    completion(.failure(NetWorkError.noValue))
                }
            } catch {
                if let jsonString = String(data: data, encoding: .utf8) {
                    print("‚ùå JSON decoding error. JSON:\n\(jsonString)")
                }
                
                completion(.failure(NetWorkError.decodingFailed))
            }
        }.resume()
        
    }
}
