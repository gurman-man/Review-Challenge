import UIKit

// MARK: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –∫–æ–∂–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó(+, -, *, /)

func add(_ a: Double, _ b: Double) -> Double {
    return a + b
}

func subtract(_ a: Double, _ b: Double) -> Double {
    return a - b
}

func multiply(_ a: Double, _ b: Double) -> Double {
    return a * b
}

// –û–ø–∏—Å –≤–ª–∞—Å–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ –¥–ª—è throw —Ñ—É–Ω–∫—Ü—ñ—ó
enum CalculatorError: Error {
    case divisionByZero
    case invalidOperator
}

func divide(_ a: Double, _ b: Double) throws -> Double {
    if b == 0 {
        throw CalculatorError.divisionByZero
    }
    return a / b
}


// MARK: - –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
let first: Double = 10
let second: Double = 5
let op: String = "/"


// MARK: - –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ–π —á–µ—Ä–µ–∑ switch
do {
    let result: Double
    switch op {
    case "+":
        result = add(first, second)
    case "-":
        result = subtract(first, second)
    case "*":
        result = multiply(first, second)
    case "/":
        result = try divide(first, second)
    default:
        fatalError("Unlnown operator!")
    }
    print("Result: \(result)")
} catch CalculatorError.divisionByZero {
    print("Error: division by zero!")
} catch {
    print("Unknown error: \(error)")
}


//  Label - –ø–∞—Ä–∞–º–µ—Ç—Ä–∏(—ñ–º–µ–Ω–æ–≤–∞–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏)
func greet(name: String, age: Int) {
    print("Hello, \(name)! You are \(age) years old.")
}

greet(name: "Max", age: 20)


// Default –ø–∞—Ä–∞–º–µ—Ç–µ—Ä
func power(base: Double, exponent: Double = 2) -> Double {
    return pow(base, exponent)
}

print(power(base: 5))


// Variadic function
func sum(_ numbers: Double...) -> Double {
    var total = 0.0
    for number in numbers {
        total += number
    }
    return total
}

print(sum(10.0, 20.0, 30.0))



// –ü–∞—Ä–∞–º–µ—Ç—Ä inout(—É —Ñ—É–Ω–∫—Ü—ñ—ó)
func change(_ message: inout String) {
    message = "!"
    print("Message: \(message)")
}

var myMessage = "Hello, world!"
change(&myMessage)
print("After function: \(myMessage)")

/// üìù –ü–û–Ø–°–ù–ï–ù–ù–Ø:
/*
 - inout —Ä–æ–±–∏—Ç—å —Ç–∞–∫, —â–æ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ change —Ç–∏ –ø—Ä–∞—Ü—é—î—à –Ω–µ –∑ –∫–æ–ø—ñ—î—é, –∞ –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ—é –∑–º—ñ–Ω–Ω–æ—é myMassege.
 - –ü—ñ–¥ —á–∞—Å –≤–∏–∫–ª–∏–∫—É —Ç—Ä–µ–±–∞ –ø–∏—Å–∞—Ç–∏ &myMassege ‚Äî —Ü–µ —Å–∏–≥–Ω–∞–ª –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä—É: ¬´—Ü—è —Ñ—É–Ω–∫—Ü—ñ—è –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è¬ª.
 - –£—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ç–∏ –ø–µ—Ä–µ–ø—Ä–∏—Å–≤–æ—é—î—à massage = "!", —Ç–æ–º—É –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ myMassege —Ç–µ–∂ —Å—Ç–∞—î "!".
 - –ù–∞ –≤–∏—Ö–æ–¥—ñ print("After function: \(myMassege)") –ø–æ–∫–∞–∂–µ "!".
 
 - –Ø–∫–±–∏ —Ç–∏ –∑–∞–±—Ä–∞–≤ inout —ñ &, —Ç–æ –∑–º—ñ–Ω–∞ –≤—ñ–¥–±—É–ª–∞—Å—è –± –ª–∏—à–µ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó, –∞ –∑–æ–≤–Ω—ñ –∑–∞–ª–∏—à–∏–ª–∞—Å—è –± "Hello,
 world!".
*/
