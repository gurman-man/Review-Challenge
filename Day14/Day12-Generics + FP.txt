‚Äî Generics + FP generic func, struct, protocol, map, filter, reduce.

1.
–©–æ —Ç–∞–∫–µ Generics —É Swift —ñ –Ω–∞–≤—ñ—â–æ –≤–æ–Ω–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ?

2.
–Ø–∫ —Å—Ç–≤–æ—Ä–∏—Ç–∏ generic —Ñ—É–Ω–∫—Ü—ñ—é?

3.
–©–æ —Ç–∞–∫–µ type constraint (<T: Comparable>) —ñ –¥–ª—è —á–æ–≥–æ –π–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å?


4.
–©–æ —Ç–∞–∫–µ associatedtype —É –ø—Ä–æ—Ç–æ–∫–æ–ª—ñ?


5.
–ü–æ—è—Å–Ω–∏ —Ä—ñ–∑–Ω–∏—Ü—é –º—ñ–∂ map, filter —ñ reduce.

6.
–©–æ —Ç–∞–∫–µ higher-order function —ñ —á–æ–º—É map/filter/reduce –Ω–µ—é —î?

7.
–Ø–∫ –ø—Ä–∞—Ü—é—î compactMap —ñ —á–∏–º –≤—ñ–Ω –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ map?

8.
–ù–∞–ø–∏—à–∏ –ø—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è reduce, —â–æ–± –∑–Ω–∞–π—Ç–∏ —Å—É–º—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤—É.

9.
–ß–æ–º—É generics —Ä–æ–±–ª—è—Ç—å –∫–æ–¥ –±—ñ–ª—å—à –±–µ–∑–ø–µ—á–Ω–∏–º —ñ –≥–Ω—É—á–∫–∏–º?

10.
–ù–∞–≤–µ–¥–∏ –ø—Ä–∏–∫–ª–∞–¥, —è–∫ –º–æ–∂–Ω–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤–ª–∞—Å–Ω—É generic —Ñ—É–Ω–∫—Ü—ñ—é filter.

–í—ñ–¥–ø–æ–≤—ñ–¥—ñ:


1.Generics - –¥–æ–≤–∑–æ–ª—è—é—Ç—å —Å—Ç–æ—Ä–∏—Ç–∏ —É–∑–∞–≥–∞–ª—å–Ω–µ–Ω—ñ —Ç–∏–ø–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–π, —â–æ –ø—Ä–∞—Ü—é—é—Ç—å –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ç–∏–ø–æ–º –¥–∞–Ω–∏—Ö. –ü–æ—Ç—Ä—ñ–±–Ω—ñ –¥–ª—è —Ç–æ–≥–æ —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –∫–æ–¥—É. –©–æ–± –º–∞—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–µ—Ä–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –∑ —ñ–Ω—à–∏–º —Ç–∏–ø–æ–º.

2. –û—Å—å —ó—ó —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: func generic<T> (parameter: T) { }

3.  Type constraint - —Ü–µ –Ω–∞–ø–µ–≤–Ω–æ –¥–ª—è —Ç–æ–≥–æ —â–æ–± –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª, —è–∫–∏–π –±—É–¥–µ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–∞—à–∞ —Ñ—É–Ω–∫—Ü—ñ—è.

4.  associatedtype - —Ü–µ —É–Ω—ñ–≤–µ—Ä—Å–∞–≤–ª—å–Ω–∏–π(—É–∑–∞–≥–∞–ª—å–Ω–µ–Ω–∏–π) —Ç–∏–ø —è–∫–∏–π –æ–≥–æ–ª–æ—à—É—î—Ç—å—Å—è –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª—ñ –¥–ª—è —Ç–æ–≥–æ —â–æ–± —É –ø–µ–≤–Ω–æ–º—É –∫–ª–∞—Å—ñ —á–∏ –º–∞—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø –¥–æ —ñ–Ω—à–æ–≥–æ –æ–±' —î–∫—Ç—É –∫–ª–∞—Å—É —á–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏.

5. map - –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –≤ –Ω–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç
filter - –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤—É—î –∫–æ–∂–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –ø–µ–≤–Ω–æ—é —É–º–æ–≤–æ—é, –∑–∞–ª–∏—à–∞—î —Ç—ñ–ª—å–∫–∏ —Ç—ñ —â–æ TRUE —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç
reduce - –∑–≥–æ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –¥–æ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è

6. higher-order function - —Ü–µ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏—â–æ–≥–æ –ø–æ—Ä—è–¥–∫—É. –¢–æ–º—É —â–æ –≤–æ–Ω–∞ –º–∞—î —Å–∫–æ—Ä–æ—á–µ–Ω–∏–π —Å–∏–Ω—Ç–∞–∫–∏—Å–∏—Å $0 - —Ü–µ –ø–∞—Ä–∞–º–µ—Ç–µ—Ä. –ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é FP –º–∏ –º–∞—î–º–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–º–µ–Ω—à–∏—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –∫–æ–¥—É —Ç–∞ –∑–º–∞–µ–Ω—à–∏—Ç–∏ —Å–∞–º –∫–æ–¥ —Ç–∞ –≥–Ω—É—á–∫–æ –≤–∏–≤–æ–¥–∏—Ç–∏ –≤–∏–Ω—É–≤–∞—Ç–∏ –¥—ñ—ó.

7. compactMap - –ø—Ä–∏–±–∏—Ä–∞—î nil, —Ç–æ–±—Ç–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –ª–∏—à–µ —Ç—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —è–∫—ñ –Ω–µ –º—ñ—Å—Ç—è—Ç—å nil. 

8. let numbers: [Int] = [1,2,3,4,5]
numbers.reduce(0, +)

9. –ì–Ω—É—á–∫–∏–º —Ä–æ–±–∏—Ç—å —á–µ—Ä–µ–∑ —Ç–µ —â–æ –º–∏ –º–æ–∂–µ–º–æ –ø–æ—Ç—ñ–º –∑–≥–æ–¥–æ–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—Ç–∏ —ñ–Ω—à–∏–π —Ç–∏–ø –¥–ª—è —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ñ—É–Ω–∫—Ü—ñ—ó. –ê –±–µ–∑–ø–µ—á–Ω–æ —Ç–∏–º —â–æ —Ç–∏–ø –ø–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è –Ω–∞ –µ—Ç–∞–ø—ñ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó - –ª–µ–≥–∫–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ —ñ–Ω—à–∏–π —Ç–∏–ø,  –∞ —Ç–∞–∫ –±—É–¥–µ –æ–¥—Ä–∞–∑—É —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —ñ –º–æ–∂–Ω–∞ –±—É–¥–µ –ª–µ–≥–∫–æ –π–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤–≤–∞—Ç–∏.

10. func filter<T>(_ array: [T], _ isIncluded: ([T]) -> Bool) -> [T] {
    for elememt in array {
        if isIncluded true {
            return elememt as! [T]
        }
    }
}


CHAT ANSWERS
1. ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ, –∞–ª–µ —É—Ç–æ—á–Ω–∏ —Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è
Generics –¥–æ–∑–≤–æ–ª—è—é—Ç—å —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∞–±–æ –∫–ª–∞—Å–∏, —è–∫—ñ –ø—Ä–∞—Ü—é—é—Ç—å –∑ –±—É–¥—å-—è–∫–∏–º —Ç–∏–ø–æ–º –¥–∞–Ω–∏—Ö –±–µ–∑ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –∫–æ–¥—É. –¶–µ —Ä–æ–±–∏—Ç—å –∫–æ–¥ –±—ñ–ª—å—à –≥–Ω—É—á–∫–∏–º —ñ –±–µ–∑–ø–µ—á–Ω–∏–º –ø—ñ–¥ —á–∞—Å –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó.

2. ‚úÖ –î–æ–±—Ä–µ, –∞–ª–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥

3. ‚öôÔ∏è –ß–∞—Å—Ç–∫–æ–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
Type constraint –æ–±–º–µ–∂—É—î —Ç–∏–ø, —è–∫–∏–π –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤ generics. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, <T: Comparable> –æ–∑–Ω–∞—á–∞—î, —â–æ T –ø–æ–≤–∏–Ω–µ–Ω –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª Comparable. üß† –ü—Ä–∏–∫–ª–∞–¥:

func findMax<T: Comparable>(_ a: T, _ b: T) -> T {
    return a > b ? a : b

4.‚öôÔ∏è –Ü–¥–µ—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞, –∞–ª–µ —Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è –≤–∞—Ä—Ç–æ —É—Ç–æ—á–Ω–∏—Ç–∏
üîπ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –±—É–¥–µ —Å–∫–∞–∑–∞—Ç–∏:
associatedtype –¥–æ–∑–≤–æ–ª—è—î –ø—Ä–æ—Ç–æ–∫–æ–ª—É –º–∞—Ç–∏ —É–∑–∞–≥–∞–ª—å–Ω–µ–Ω–∏–π —Ç–∏–ø, —è–∫–∏–π —É—Ç–æ—á–Ω—é—î—Ç—å—Å—è –ø—ñ–∑–Ω—ñ—à–µ, –∫–æ–ª–∏ —Ç–∏–ø —Ä–µ–∞–ª—ñ–∑—É—î —Ü–µ–π –ø—Ä–æ—Ç–æ–∫–æ–ª. üß† –ü—Ä–∏–∫–ª–∞–¥:

protocol Container {
    associatedtype Item
    func add(_ item: Item)
}

5. ‚úÖ –î—É–∂–µ –¥–æ–±—Ä–µ!
map ‚Äî –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î, filter ‚Äî –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤—É—î, reduce ‚Äî –∑–≥–æ—Ä—Ç–∞—î.
‚úîÔ∏è –í—Å–µ —á—ñ—Ç–∫–æ –π –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ú–æ–∂–µ—à —â–µ –¥–æ–¥–∞—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–∏–∫–ª–∞–¥:

let numbers = [1, 2, 3]
let doubled = numbers.map { $0 * 2 }       // [2, 4, 6]
let even = numbers.filter { $0 % 2 == 0 }  // [2]
let sum = numbers.reduce(0, +)             // 6

6. ‚öôÔ∏è –Ñ –∑–º—ñ—à–∞–Ω–æ —Ç—Ä–æ—Ö–∏
üîπ $0 ‚Äî —Ü–µ shorthand —Å–∏–Ω—Ç–∞–∫—Å–∏—Å closure, –∞–ª–µ –Ω–µ –ø—Ä–∏—á–∏–Ω–∞, —á–æ–º—É —Ñ—É–Ω–∫—Ü—ñ—è ‚Äî higher-order.
üîπ –ü—Ä–∞–≤–∏–ª—å–Ω—ñ—à–µ —Å–∫–∞–∑–∞—Ç–∏:
Higher-order functions ‚Äî —Ü–µ —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫—ñ –ø—Ä–∏–π–º–∞—é—Ç—å —ñ–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —è–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∞–±–æ –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é. üß† –ü—Ä–∏–∫–ª–∞–¥:

let doubled = [1, 2, 3].map { $0 * 2 } // map –ø—Ä–∏–π–º–∞—î closure

7. ‚úÖ –ê–±—Å–æ–ª—é—Ç–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ

8. ‚úÖ –Ü–¥–µ–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ —ñ —á—ñ—Ç–∫–æ

9. ‚úÖ –î—É–∂–µ –¥–æ–±—Ä–µ
–¢–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞ ‚Äî generics –∑–∞–±–µ–∑–ø–µ—á—É—é—Ç—å –≥–Ω—É—á–∫—ñ—Å—Ç—å —ñ –±–µ–∑–ø–µ—á–Ω—ñ—Å—Ç—å —Ç–∏–ø—ñ–≤.

10. ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—ñ
–§—É–Ω–∫—Ü—ñ—è –Ω–∞–ø–∏—Å–∞–Ω–∞ –∑ –∫—ñ–ª—å–∫–æ–º–∞ –ø–æ–º–∏–ª–∫–∞–º–∏. –û—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥:

func myFilter<T>(_ array: [T], _ isIncluded: (T) -> Bool) -> [T] {
    var result = [T]()
    for element in array {
        if isIncluded(element) {
            result.append(element)
        }
    }
    return result
}